{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/Vue/路由.md?vue&type=template&id=21e2d9cb&","dependencies":[{"path":"/Users/takki/blog/docs/Vue/路由.md","mtime":1570609738752},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"路由原理\\\"><a href=\\\"#路由原理\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 路由原理</h1> <p>前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。</p> <ul><li>hash 模式</li> <li>history 模式</li> <li>abstract 模式</li></ul> <p>www.test.com/##/ 就是 Hash URL，当 ## 后面的哈希值发生变化时，<strong>不会向服务器请求数据</strong>，通过 <strong>hashchange</strong> 事件来监听到 URL 的变化，从而进行跳转页面。</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code>window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onhashchange</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">e</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'hashchange'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token parameter\\\">e</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p><img src=\\\"/img/hash.png\\\" alt=\\\"'hash'\\\"></p> <p>History 模式是 HTML5 新推出的功能，比之 Hash URL 更加美观。 利用 <strong>history.pushState</strong> API 来完成 URL 跳转而无须重新加载页面。</p> <p><img src=\\\"/img/history.png\\\" alt=\\\"'history'\\\"></p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}