{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/browser/持久化.md?vue&type=template&id=13cebe46&","dependencies":[{"path":"/Users/takki/blog/docs/browser/持久化.md","mtime":1549959331816},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"持久化\\\"><a href=\\\"#持久化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 持久化</h1> <h2 id=\\\"cookie\\\"><a href=\\\"#cookie\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Cookie</h2> <p>Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为 4KB 左右，是网景公司的前雇员 Lou Montulli 在 1993 年 3 月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。</p> <table><thead><tr><th>属性</th> <th>作用</th></tr></thead> <tbody><tr><td>value</td> <td>如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td></tr> <tr><td>http-only</td> <td>不能通过 JS 访问 Cookie，减少 XSS 攻击</td></tr> <tr><td>secure</td> <td>只能在协议为 HTTPS 的请求中携带</td></tr> <tr><td>same-site</td> <td>规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</td></tr></tbody></table> <h1 id><a href=\\\"#\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a></h1> <h2 id=\\\"localstorage\\\"><a href=\\\"#localstorage\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> localStorage</h2> <p>localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。</p> <h2 id=\\\"sessionstorage\\\"><a href=\\\"#sessionstorage\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> sessionStorage</h2> <p>sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。</p> <table><thead><tr><th>特性</th> <th>Cookie</th> <th>localStorage</th> <th>sessionStorage</th></tr></thead> <tbody><tr><td>数据的生命期</td> <td>\\n        一般由服务器生成，可设置失效时间。如果在浏览器端生成\\n        Cookie，默认是关闭浏览器后失效\\n      </td> <td>除非被清除，否则永久保存</td> <td>仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr> <tr><td>存放数据大小</td> <td>4K 左右</td> <td colspan=\\\"2\\\">一般为 5MB</td></tr> <tr><td>与服务器端通信</td> <td>\\n        每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题\\n      </td> <td colspan=\\\"2\\\">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td></tr></tbody></table>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}