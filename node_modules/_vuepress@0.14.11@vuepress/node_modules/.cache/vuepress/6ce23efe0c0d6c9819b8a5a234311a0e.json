{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/browser/xss.md?vue&type=template&id=25fde1d4&","dependencies":[{"path":"/Users/takki/blog/docs/browser/xss.md","mtime":1569128035528},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"xss-攻击\\\"><a href=\\\"#xss-攻击\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> XSS 攻击</h1> <blockquote><p>跨站脚本攻击(Cross-site scripting)</p></blockquote> <p>跨站脚本攻击Cross-site scripting (XSS)是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者。</p> <p><img src=\\\"/img/xss.jpg\\\" alt=\\\"xss\\\"></p> <h2 id=\\\"如何预防\\\"><a href=\\\"#如何预防\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 如何预防</h2> <ul><li>HttpOnly 防止劫取 Cookie</li> <li>用户的输入检查</li> <li>服务端的输出检查</li></ul> <h2 id=\\\"csp\\\"><a href=\\\"#csp\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> CSP</h2> <blockquote><p>内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p></blockquote> <p>我们可以通过 CSP 来尽量减少 XSS 攻击。CSP 本质上也是建立白名单，规定了浏览器只能够执行特定来源的代码。</p> <p>通常可以通过 HTTP Header 中的 Content-Security-Policy 来开启 CSP</p> <ul><li>只允许加载本站资源</li></ul> <p><code>Content-Security-Policy: default-src ‘self’</code></p> <ul><li>只允许加载 HTTPS 协议图片</li></ul> <p><code>Content-Security-Policy: img-src https://*</code></p> <ul><li>允许加载任何来源框架</li></ul> <p><code>Content-Security-Policy: child-src 'none'</code></p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}