{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/JavaScript/promise.md?vue&type=template&id=41530db5&","dependencies":[{"path":"/Users/takki/blog/docs/JavaScript/promise.md","mtime":1569749139249},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"promise\\\"><a href=\\\"#promise\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> promise</h1> <p>Promise 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值</p> <p><img src=\\\"https://mdn.mozillademos.org/files/8633/promises.png\\\" alt></p> <h2 id=\\\"promise-2\\\"><a href=\\\"#promise-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> promise</h2> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">isFun</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">fn</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token keyword\\\">typeof</span> fn <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">PENDING</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'pending'</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">FULFILLED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'fulfilled'</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">REJECT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'reject'</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">promise</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">executor</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断入参是否为函数，非函数抛出错误</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isFun</span><span class=\\\"token punctuation\\\">(</span>executor<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token function\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`Promise resolver </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>executor<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> is not a function`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 初始化</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">PENDING</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span>\\n    <span class=\\\"token comment\\\">// 成功失败回调</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onFulfilledCallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onRejectedCallbacks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token comment\\\">// 执行表达式</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">executor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 成功</span>\\n  <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">value</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">FULFILLED</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> value\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onFulfilledCallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">fn</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 失败</span>\\n  <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">reason</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status <span class=\\\"token operator\\\">===</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">REJECT</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">=</span> reason\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onRejectedCallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">fn</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">onFulfilled<span class=\\\"token punctuation\\\">,</span> onRejected</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断入参是否为函数，非函数直接返回值</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isFun</span><span class=\\\"token punctuation\\\">(</span>onFulfilled<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function-variable function\\\">onFulfilled</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">val</span> <span class=\\\"token operator\\\">=&gt;</span> val\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 判断入参是否为函数，非函数抛出错误</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">isFun</span><span class=\\\"token punctuation\\\">(</span>onRejected<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function-variable function\\\">onRejected</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">reason</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> reason\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 返回一个实例</span>\\n    <span class=\\\"token keyword\\\">let</span> promise2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">resolve<span class=\\\"token punctuation\\\">,</span> reject</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token constant\\\">PENDING</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onFulfilledCallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>promise2<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onRejectedCallbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>promise2<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">break</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token constant\\\">FULFILLED</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">onFulfilled</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>promise2<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">break</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">case</span> <span class=\\\"token constant\\\">REJECT</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>promise2<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">break</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> promise2\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 核心方法</span>\\n  <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">promise<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 有可能x===promise</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">===</span> promise<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token string\\\">'TypeError: Chaining cycle detected for promise #&lt;Promise&gt;'</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 如果是第三方的Promise</span>\\n    <span class=\\\"token keyword\\\">let</span> called <span class=\\\"token comment\\\">// 文档要求，一旦成功，不能调用失败</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// x可能是一个promise</span>\\n      <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// x = {then:function(){}}</span>\\n        <span class=\\\"token keyword\\\">let</span> then <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">.</span>then <span class=\\\"token comment\\\">// 取then方法</span>\\n\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> then <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>\\n            x<span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">y</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>called<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                called <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token function\\\">resolvePromise</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">,</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 递归检查promise</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">r</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n              <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>called<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                called <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 普通值</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>called<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          called <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// x是普通值，直接返回</span>\\n      <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"promise-all\\\"><a href=\\\"#promise-all\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> promise.all()</h2> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">all</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">promises</span> <span class=\\\"token operator\\\">=&gt;</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">resolve<span class=\\\"token punctuation\\\">,</span> reject</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token keyword\\\">let</span> count <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">promise</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token parameter\\\">res</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n          count<span class=\\\"token operator\\\">++</span>\\n          resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">===</span> promises<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token parameter\\\">err</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><h2 id=\\\"promise-race\\\"><a href=\\\"#promise-race\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> promise.race()</h2> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">race</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">promises</span> <span class=\\\"token operator\\\">=&gt;</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">resolve<span class=\\\"token punctuation\\\">,</span> reject</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">promise</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}