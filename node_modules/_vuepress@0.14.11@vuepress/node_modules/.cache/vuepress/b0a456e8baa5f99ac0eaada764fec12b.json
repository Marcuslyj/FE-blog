{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/JavaScript/this.md?vue&type=template&id=55cd74d0&","dependencies":[{"path":"/Users/takki/blog/docs/JavaScript/this.md","mtime":1569219799568},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"this\"><a class=\"header-anchor\" href=\"#this\" aria-hidden=\"true\">#</a> this</h1>\n<blockquote>\n<p>谁调用它，this 就指向谁</p>\n</blockquote>\n<h3 id=\"全局环境中的-this\"><a class=\"header-anchor\" href=\"#全局环境中的-this\" aria-hidden=\"true\">#</a> 全局环境中的 this</h3>\n<p>浏览器环境：无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指向全局对象 <strong>window</strong>;</p>\n<p>node 环境：无论是否在严格模式下，在全局执行环境中（在任何函数体外部），this 都是空对象 <strong>{}</strong>;</p>\n<h3 id=\"new-绑定\"><a class=\"header-anchor\" href=\"#new-绑定\" aria-hidden=\"true\">#</a> new 绑定</h3>\n<p>如果是 new 绑定，并且构造函数中没有返回 function 或者是 object，那么 this 指向这个<strong>新对象</strong>。</p>\n<p><router-link to=\"/JavaScript/new.html\">new 实现原理</router-link></p>\n<h3 id=\"call-apply-bind-显式绑定\"><a class=\"header-anchor\" href=\"#call-apply-bind-显式绑定\" aria-hidden=\"true\">#</a> call,apply,bind 显式绑定</h3>\n<p>this 绑定的就是<strong>指定对象</strong>。</p>\n<p>如果 call,apply,bind 传入的第一个参数值是 undefined 或者 null，严格模式下 this 的值为传入的值 null /undefined。非严格模式下，实际应用的默认绑定规则，this 指向全局对象(node 环境为 global，浏览器环境为 window)。</p>\n<p><router-link to=\"/JavaScript/call.html\">call,apply,bind</router-link></p>\n<h3 id=\"隐式绑定，函数的调用是在某个对象上触发的，即调用位置上存在上下文对象\"><a class=\"header-anchor\" href=\"#隐式绑定，函数的调用是在某个对象上触发的，即调用位置上存在上下文对象\" aria-hidden=\"true\">#</a> 隐式绑定，函数的调用是在某个对象上触发的，即调用位置上存在上下文对象</h3>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  info<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//20;执行的是隐式绑定</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"默认绑定，在不能应用其它绑定规则时使用的默认规则，通常是独立函数调用\"><a class=\"header-anchor\" href=\"#默认绑定，在不能应用其它绑定规则时使用的默认规则，通常是独立函数调用\" aria-hidden=\"true\">#</a> 默认绑定，在不能应用其它绑定规则时使用的默认规则，通常是独立函数调用</h3>\n<p>非严格模式： node 环境，执行全局对象 global，浏览器环境，执行全局对象 window。</p>\n<p>严格模式：执行 undefined</p>\n<h3 id=\"箭头函数\"><a class=\"header-anchor\" href=\"#箭头函数\" aria-hidden=\"true\">#</a> 箭头函数</h3>\n<p>箭头函数没有自己的 this，继承外层上下文绑定的 this。</p>\n</div>\n",null]}