{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/Vue/Virtual DOM.md?vue&type=template&id=53d6d97f&","dependencies":[{"path":"/Users/takki/blog/docs/Vue/Virtual DOM.md","mtime":1569136332315},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"virtual-dom\"><a class=\"header-anchor\" href=\"#virtual-dom\" aria-hidden=\"true\">#</a> Virtual DOM</h1>\n<p>Virtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。</p>\n<h2 id=\"模板转换成视图的过程\"><a class=\"header-anchor\" href=\"#模板转换成视图的过程\" aria-hidden=\"true\">#</a> 模板转换成视图的过程</h2>\n<ul>\n<li>Vue.js通过编译将template 模板转换成渲染函数(render ) ，执行渲染函数就可以得到一个虚拟节点树</li>\n<li>在对 Model 进行操作的时候，会触发对应 Dep 中的 Watcher 对象。Watcher 对象会调用对应的 update 来修改视图。这个过程主要是将新旧虚拟节点进行差异对比，然后根据对比结果进行DOM操作来更新视图。</li>\n</ul>\n<p><img src=\"/img/VirtualDOM.png\" alt=\"\"></p>\n<h2 id=\"virtual-dom-作用是什么？\"><a class=\"header-anchor\" href=\"#virtual-dom-作用是什么？\" aria-hidden=\"true\">#</a> Virtual DOM 作用是什么？</h2>\n<p><strong>虚拟DOM的最终目标是将虚拟节点渲染到视图上。</strong></p>\n<p>其实虚拟DOM在Vue.js主要做了两件事：</p>\n<ul>\n<li>提供与真实DOM节点所对应的虚拟节点vnode</li>\n<li>将虚拟节点vnode和旧虚拟节点oldVnode进行对比，然后更新视图</li>\n</ul>\n</div>\n",null]}