{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/JavaScript/new.md?vue&type=template&id=dd6a82ba&","dependencies":[{"path":"/Users/takki/blog/docs/JavaScript/new.md","mtime":1562320298715},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"new\\\"><a href=\\\"#new\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> new</h1> <ol><li>创建一个新对象。</li> <li>这个新对象会被执行 [[原型]] 连接。</li> <li>属性和方法被加入到 this 引用的对象中。并执行了构造函数中的方法.</li> <li>如果函数没有返回其他对象，那么 this 指向这个新对象，否则 this 指向构造函数中返回的对象。</li></ol> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">_new</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 创建一个空的对象</span>\\n  <span class=\\\"token keyword\\\">let</span> target <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 获得构造函数</span>\\n  <span class=\\\"token keyword\\\">let</span> <span class=\\\"token punctuation\\\">[</span>constructor<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>arguments<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token comment\\\">// 链接到原型</span>\\n  target<span class=\\\"token punctuation\\\">.</span>__proto__ <span class=\\\"token operator\\\">=</span> constructor<span class=\\\"token punctuation\\\">.</span>prototype\\n  <span class=\\\"token comment\\\">// 绑定 this，执行构造函数</span>\\n  <span class=\\\"token keyword\\\">let</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// 确保 new 出来的是个对象</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> result <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">?</span> result <span class=\\\"token punctuation\\\">:</span> target\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}