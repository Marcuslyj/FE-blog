{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/css/flex.md?vue&type=template&id=391975c2&","dependencies":[{"path":"/Users/takki/blog/docs/css/flex.md","mtime":1569074864157},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"flex\"><a class=\"header-anchor\" href=\"#flex\" aria-hidden=\"true\">#</a> flex</h1>\n<p><img src=\"/img/flex.png\" alt=\"flex\"></p>\n<ul>\n<li>\n<p>主轴是依靠 flex-direction 和 所有子元素在主轴方向上的 item-size 的总和确定的，flex-direction 这个属性可以控制子元素的排列方向和排列顺序。</p>\n</li>\n<li>\n<p>侧轴是依靠 flex-wrap 和 所有子元素在主轴方向上的 item-size 的总和确定的，flex-wrap 可以控制子元素 在侧轴方向上的排列方式以及顺序。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>作用在 flex 容器上</th>\n<th>作用在 flex 子项上</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>flex-flow</td>\n<td>flex</td>\n</tr>\n<tr>\n<td>flex-direction</td>\n<td>flex-shrink</td>\n</tr>\n<tr>\n<td>flex-wrap （单行/多行）</td>\n<td>flex-grow</td>\n</tr>\n<tr>\n<td>justify-content (分配主轴空间)</td>\n<td>flex-basis</td>\n</tr>\n<tr>\n<td>align-items （分配侧轴空间）</td>\n<td>order</td>\n</tr>\n<tr>\n<td>align-content (单行弹性盒子无效)</td>\n<td>align-self</td>\n</tr>\n</tbody>\n</table>\n<p>无论作用在 flex 容器上，还是作用在 flex 子项，都是控制的 flex 子项的呈现，只是前者控制的是整体，后者控制的是个体。</p>\n</div>\n",null]}