{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/JavaScript/call.md?vue&type=template&id=c8021582&","dependencies":[{"path":"/Users/takki/blog/docs/JavaScript/call.md","mtime":1564109355587},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"call-apply-bind\\\"><a href=\\\"#call-apply-bind\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Call,Apply,Bind</h2> <p>相同点：</p> <ul><li>改变<strong>函数</strong>的this对象的指向</li> <li>第一个参数都是 this 要指向的对象</li> <li>都可以利用后续参数传参</li></ul> <p>不同点：</p> <ul><li>参数传递方式不同</li> <li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li></ul> <p>基本使用：</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>简易 bind 实现</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// arguments参数是个伪数组，通过 Array.prototype.slice.call 转化为标准数组</span>\\n<span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">bind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">context</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 不能使用箭头函数</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>上面的 bind 只实现了方法的作用域绑定，参数已经固定，如果想要动态的参数我们得改写一下</p> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">bind</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">context</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> argus <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">,</span> argus<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h3 id=\\\"call实现\\\"><a href=\\\"#call实现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> call实现</h3> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">call</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">ctx <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n ctx<span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span> \\n <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token keyword\\\">delete</span> ctx<span class=\\\"token punctuation\\\">.</span>fn\\n <span class=\\\"token keyword\\\">return</span> res\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n</code></pre></div><h3 id=\\\"apply实现\\\"><a href=\\\"#apply实现\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> apply实现</h3> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">apply</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">ctx <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">...</span>args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n ctx<span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span> \\n <span class=\\\"token keyword\\\">let</span> res <span class=\\\"token operator\\\">=</span> ctx<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token keyword\\\">delete</span> ctx<span class=\\\"token punctuation\\\">.</span>fn\\n <span class=\\\"token keyword\\\">return</span> res\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}