{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/browser/eventLoop.md?vue&type=template&id=d265f382&","dependencies":[{"path":"/Users/takki/blog/docs/browser/eventLoop.md","mtime":1550045877202},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"event-loop\"><a class=\"header-anchor\" href=\"#event-loop\" aria-hidden=\"true\">#</a> Event loop</h1>\n<p>JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n<p><img src=\"/img/eventLoop.png\" alt=\"'eventLoop'\"></p>\n<p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。</p>\n<p>常见的微任务：</p>\n<ul>\n<li>promise</li>\n</ul>\n<p>常见的宏任务：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n</ul>\n<p>正确的一次 Event loop 顺序是这样:</p>\n<ul>\n<li>选择当前要执行的任务队列，选择任务队列中最先进入的任务，如果任务队列为空即null，则执行跳转到微任务（MicroTask）的执行步骤。</li>\n<li>将事件循环中的任务设置为已选择任务。</li>\n<li>执行任务。</li>\n<li>将事件循环中当前运行任务设置为null。</li>\n<li>将已经运行完成的任务从任务队列中删除。</li>\n<li>microtasks步骤：进入microtask检查点。</li>\n<li>更新界面渲染。</li>\n<li>返回第一步。</li>\n</ul>\n<p>async 函数在 await 之前的代码都是同步执行的，可以理解为 await 之前的代码属于 new Promise 时传入的代码，await 之后的所有代码都是在 Promise.then 中的回调</p>\n</div>\n",null]}