{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/JavaScript/数据类型和数据结构.md?vue&type=template&id=4670e1fc&","dependencies":[{"path":"/Users/takki/blog/docs/JavaScript/数据类型和数据结构.md","mtime":1567405958015},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"变量和类型\\\"><a href=\\\"#变量和类型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 变量和类型</h1> <p>原始类型：</p> <ul><li>Boolean</li> <li>Null</li> <li>Undefined</li> <li>Number(NaN +/-Infinity)</li> <li>String</li> <li>Symbol (ES6 新定义，创建一个唯一且不可修改的值)</li> <li>BigInt (ES10 新定义)</li></ul> <p>对象类型：</p> <ul><li>Object(对象是指内存中的可以被标识符引用的一块区域)</li></ul> <h2 id=\\\"内存模型\\\"><a href=\\\"#内存模型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 内存模型</h2> <p><img src=\\\"/img/heap_stack.png\\\" alt=\\\"'堆栈'\\\"></p> <ul><li>原始类型：以键值对存储在<strong>栈</strong></li> <li>对象类型：<strong>堆</strong>（引用变量存储在栈中，指向于存储在堆中的实际对象）</li></ul> <h2 id=\\\"底层数据结构\\\"><a href=\\\"#底层数据结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 底层数据结构</h2> <ul><li>Object：Hash</li></ul> <p>在 JavaScript 中对象是以 Hash 结构存储的，用 &lt;Key, Value&gt; 键值对表示对象的属性，Key 的数据类型为字符串，Value 的数据类型是结构体，即对象是以 &lt;String, Object&gt; 类型的 HashMap 结构存储的。</p> <h2 id=\\\"null-和-undefined-的区别\\\"><a href=\\\"#null-和-undefined-的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> null 和 undefined 的区别</h2> <p>null 特指对象的值未设置</p> <p>undefined 表示操作的变量没有被赋值</p> <h2 id=\\\"判断-js-数据类型\\\"><a href=\\\"#判断-js-数据类型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 判断 JS 数据类型</h2> <ol><li>typeof</li></ol> <ul><li>对于基本类型，除 null 以外，均可以返回正确的结果。</li> <li>对于引用类型，除 function 以外，一律返回 object 类型。</li> <li>对于 null ，返回 object 类型。</li> <li>对于 function 返回 function 类型。</li></ul> <ol start=\\\"2\\\"><li>instanceof</li></ol> <div class=\\\"language-js extra-class\\\"><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">instanceof</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">leftVaule<span class=\\\"token punctuation\\\">,</span> rightVaule</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> rightProto <span class=\\\"token operator\\\">=</span> rightVaule<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取右表达式的 prototype 值</span>\\n    leftVaule <span class=\\\"token operator\\\">=</span> leftVaule<span class=\\\"token punctuation\\\">.</span>__proto__<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 取左表达式的__proto__值</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>leftVaule <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>leftVaule <span class=\\\"token operator\\\">===</span> rightProto<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        leftVaule <span class=\\\"token operator\\\">=</span> leftVaule<span class=\\\"token punctuation\\\">.</span>__proto__\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><ol start=\\\"3\\\"><li><p>constructor</p></li> <li><p>toString</p></li></ol>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}