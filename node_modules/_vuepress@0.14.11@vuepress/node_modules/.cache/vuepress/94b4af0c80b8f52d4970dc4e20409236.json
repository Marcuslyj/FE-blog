{"remainingRequest":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--1-0!/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/takki/blog/docs/Vue/计算属性 VS 侦听属性.md?vue&type=template&id=51d1ae0d&","dependencies":[{"path":"/Users/takki/blog/docs/Vue/计算属性 VS 侦听属性.md","mtime":1570776156663},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/takki/blog/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"计算属性和侦听器\\\"><a href=\\\"#计算属性和侦听器\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 计算属性和侦听器</h1> <h2 id=\\\"computed\\\"><a href=\\\"#computed\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> computed</h2> <ul><li><p>计算属性的结果会被缓存，计算属性只有相关依赖的响应式属性变化才会重新计算</p></li> <li><p>计算属性默认只有 getter</p></li></ul> <h2 id=\\\"computed-缓存-vs-methods\\\"><a href=\\\"#computed-缓存-vs-methods\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> computed 缓存 VS methods</h2> <p><strong>computed是基于它们的响应式依赖进行缓存的</strong>,在相关响应式依赖发生改变时它们才会重新求值</p> <p>触发重新渲染时，methods<strong>总会</strong>执行</p> <h2 id=\\\"computed-vs-watch\\\"><a href=\\\"#computed-vs-watch\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> computed VS watch</h2> <p><code>watch</code> 可以执行<strong>异步任务</strong></p> <p><code>computed</code> 不能执行异步任务，计算属性必须<strong>同步执行</strong></p> <h2 id=\\\"总结\\\"><a href=\\\"#总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 总结</h2> <ul><li>当你在模板内使用了复杂逻辑的表达式时，你应当使用计算属性。</li> <li>虽然方法也能实现同样的效果，但是因为计算属性可以基于它们的依赖进行缓存，所以选择计算属性会比方法更优。</li> <li>当需要在数据变化时执行异步或开销较大的操作时，可以使用 watch。</li></ul> <p><img src=\\\"/img/computed.png\\\" alt=\\\"computed\\\"></p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}